%% Disclaimer : This script does not reflect any real application of the dfs script-language,
%% it just makes sense syntactically ;)

def threshold = 333
def table = 'doc.mytable'
def string = 'schtringg'
def tname = 'text_template'

def template_declaration = 'This is my super {{string}}'

def  sql0 =
    '
    SELECT COUNT(*) FROM "{{table }}" WHERE data[''WasId''] = {{"wasid"}} AND value < {{threshold}}
    '


def text_list = ['alles', 'ist', 'wurscht', '{{string}}']

|db()
.query(sql0)
.host('127.0.0.1')
.port(4456)
.as(template_declaration)
.ttemplate('Try this template it is called: {{tname}}')
.list(text_list)

def duration_zero = 0h

|where(lambda: "action_ts" < int('last_ts') )

def q = '
SELECT AISLE, COUNT (*) AS COUNT,
'

def query = '
SELECT AISLE, COUNT (*) AS COUNT, ''{ id:''||PS.CONST||'',name:''||PS.NAME||''}'' AS STATUS
    FROM PATTERN_POSITION_ROLE PPR
       INNER JOIN POSITION_STATUS PS ON (POSITION_STATUS = CONST)
       INNER JOIN STORAGE_ROLE SR ON (SR.ID = PPR.ID)
       INNER JOIN PLACE SN ON (SN.ID = SR.PLACE_ID)
       INNER JOIN WAREHOUSE_GEOMETRY WG ON (WG.PLACE_ID = SN.ID)
       INNER JOIN PATTERN_POSITION PP ON (PP.ID = PATTERN_POSITION_ID)
    GROUP BY WG.AISLE,  PS.CONST, PS.NAME
    ORDER BY WG.AISLE
'

def streamLookup =   '[{"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation13","StreamId":"6c9ca2da-9282-456e-9be4-af780c430c9a","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/6c9ca2da-9282-456e-9be4-af780c430c9a"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation14","StreamId":"fde086a3-e09a-43ea-a085-98aa68ebe580","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/fde086a3-e09a-43ea-a085-98aa68ebe580"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation15","StreamId":"7cc412f2-2a5d-49d3-af8d-ca4b6cd282f4","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/7cc412f2-2a5d-49d3-af8d-ca4b6cd282f4"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation16","StreamId":"8a51c95b-ea78-455c-a2a0-a5faca94ffa4","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/8a51c95b-ea78-455c-a2a0-a5faca94ffa4"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation17","StreamId":"b44247c7-cbf4-4f48-be65-17e7c9ac9d1a","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/b44247c7-cbf4-4f48-be65-17e7c9ac9d1a"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation18","StreamId":"e2d8473c-fc5b-47fb-9f42-dde20d850512","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/e2d8473c-fc5b-47fb-9f42-dde20d850512"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation19","StreamId":"4ba49289-f451-4bea-9056-b5afd6cf07d3","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/4ba49289-f451-4bea-9056-b5afd6cf07d3"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation20","StreamId":"9d3ff2cb-5aa0-465f-a994-7da8756429fc","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/9d3ff2cb-5aa0-465f-a994-7da8756429fc"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation21","StreamId":"94d1881f-314c-4bb2-a7e7-56d354d0a71c","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/94d1881f-314c-4bb2-a7e7-56d354d0a71c"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation22","StreamId":"de8c8a1e-a6b4-4ab6-bf8b-7ccea0b9f572","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/de8c8a1e-a6b4-4ab6-bf8b-7ccea0b9f572"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation23","StreamId":"4c20ae15-e73f-47d3-8780-87fee290a9f0","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/4c20ae15-e73f-47d3-8780-87fee290a9f0"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation24","StreamId":"d7e8f460-7822-42f0-9357-50749de75115","Dataformat":"6001.0002","Topic":"tgw/data/0x330f/6001.0002/d7e8f460-7822-42f0-9357-50749de75115"}]'
def inputStreamLookup = '[{"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation13","StreamId":"fa0fcdf8-c60e-41a7-a7e1-3c92fc06cfe6","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/fa0fcdf8-c60e-41a7-a7e1-3c92fc06cfe6"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation14","StreamId":"a6121d9f-ac83-4a6c-9260-92a58cb33e9e","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/a6121d9f-ac83-4a6c-9260-92a58cb33e9e"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation15","StreamId":"13a17509-7f01-483d-aff9-69244bb482a1","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/13a17509-7f01-483d-aff9-69244bb482a1"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation16","StreamId":"6ba64078-3b00-4626-88d8-cfa9a899053c","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/6ba64078-3b00-4626-88d8-cfa9a899053c"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation17","StreamId":"69a52682-81f9-4c5b-bed0-651a00f43deb","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/69a52682-81f9-4c5b-bed0-651a00f43deb"}, {"Key":"/Tgw/FlashPickDoubleLoop/Lower/Workstations/PickStation18","StreamId":"650a6078-da1f-471e-8e48-c77607ed38e2","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/650a6078-da1f-471e-8e48-c77607ed38e2"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation19","StreamId":"71f10a23-4b72-4700-892b-d929f3519b9f","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/71f10a23-4b72-4700-892b-d929f3519b9f"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation20","StreamId":"529b1daf-9efa-489f-8278-83d88bcde3dc","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/529b1daf-9efa-489f-8278-83d88bcde3dc"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation21","StreamId":"9e250d07-8ab8-4c0a-b28f-0d1f9e274c73","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/9e250d07-8ab8-4c0a-b28f-0d1f9e274c73"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation22","StreamId":"9e6905b1-ee7b-409e-afac-0436f669bb53","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/9e6905b1-ee7b-409e-afac-0436f669bb53"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation23","StreamId":"1bc69ccd-7f57-48ea-8097-fd280fe59a30","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/1bc69ccd-7f57-48ea-8097-fd280fe59a30"}, {"Key":"/Tgw/FlashPickDoubleLoop/Upper/Workstations/PickStation24","StreamId":"2649ef64-5ad4-4e89-a50a-728dbbaf0f57","Dataformat":"1202.0015","Topic":"tgw/data/0x330f/1202.0015/2649ef64-5ad4-4e89-a50a-728dbbaf0f57"}]'
def source_stream_ids =
    e: string(str_enclose('''', select('StreamId', [{'Dataformat', dataFormat_src}], inputStreamLookup)))

def dest_stream_ids =
    e: string(str_enclose('''', select('StreamId', [{'Dataformat', dataFormat_dst_f}], streamLookup)))


def start_sql = '
SELECT COALESCE(
    (SELECT DATE_FORMAT(ts) as time_stamp_query
        FROM debug.{{table_dst}}
        WHERE {{column}} IS NOT NULL
        AND stream_id IN (#dest_streamIds)
        ORDER BY ts DESC LIMIT 1) ,
    (SELECT DATE_FORMAT(ts) as time_stamp_query
            FROM debug.{{table_src}}
            WHERE {{column_src}} IS NOT NULL
            AND stream_id IN (#source_streamIds)
            ORDER BY ts DESC LIMIT 1) ,
    ''{{startTime}}''
    )
AS ts'

def start_query =
    e: str_replace(
        start_sql,
        ['#dest_streamIds', '#source_streamIds'],
        [dest_stream_ids, source_stream_ids])



def prefix = 'pre_'
def offset = 9
def list = ['alle', 'kinder', 'gehen', 'ueber', 'die', 'strasse']

|node()
.host(['alle', 'kinder', 'gehen', 'ueber', 'die', 'strasse'], ['more', 5, 'lists'])
.alist(list)
%.lamb(lambda: avg("e" * 2, "holymoly"))
.eval(lambda: str_concat(['alle', 'kinder'], ['ueber', str_last("die"), prefix, "strasse"]) )

|eval()
.lambdas(
    lambda: str_concat(
        ['The reason ', 'is ', "data.condition_reason", ' because of ', string("data.vac_on_without_contact[2]")]
        )
    )
.as('data.concat_string')

   %% Definitions
   def func = lambda: "rate" *2
      %def mylist = [1,2,3,4]
      def onelist = [9,8,7,6]
   def mylist = ['a', 'b', 'c']
   def inStreamId = '1.004.987349f9e87fwef'
   def outStreamId = '2.404.5dfgs555sa5df5a'
   % false lambda: must be speicifed before primary-expr
   def host = 'de.example.com'
   def dead_message = 'LOW on CARBONIDE !!!'
   def deadman_period = 15m
   def bool = TRUE
   def number = 33.4434
   def sql = ' SELECT COUNT(*) FROM table % WHERE "data_obj"[''a''][''b''] = c GROUP BY c LIMIT 3'

    |eval()
    .lambdas(lambda: round( (float("UTC-Time")*1000) ) )
    .as('ts')

    def qry =
    |postgre_query()
    .query(sql)
    .stmt( ' trag.wack[2].sack ' )
    .string('trag.wack[2].sack')
    .level('interface::WmsInterface::logTelegram')

   def in1 =
      |stream_in(bool)
      .from(inStreamId)
      .f(func)
      .list(mylist)

   def in2 =
      |stream_in()
        .from('1.004.987349f9e87fwef')

   def alle = 'viele'

   in1
   |deadman(deadman_period, 30)
        .msg(dead_message)

   in2
      |deadman(15, 30s)

   def m = 'pm'

   in2
      |join(in1)
      .on('val')
      .translate(
        ?_chair?, %% 'red_chair', red_desk
        lambda: "opmean.val" + 2 * max("val1", "val2")/3,
        myNextParam,
        lambda: ("max" - "min") /2,
        lambda: string("max") == '5',
        lambda: str_ends_with(inStreamId, 'fwef'),
        lambda: str_ends_with("muxolo", 'olo'),
        %lambda: lookup(deadman_period) + number,
        lambda: string(bool)
        )

      |lambda(
        lambda: str_trim("host") == 'server001.example.com',
        mode,
        '12354688978' %% numberstring here
      )
      |window()
      .every(15s)
      .period(30m)
      .stats(esp_mean, esp_difference)
      .field('val')
      .as('mean', 'diff')
      .align(lambda: (hour("ts")) > 3 AND (hour("ts") < 9))
      @outlier()
       .tolerance(sigma())

      %% write to outstream
      |stream_out(outStreamId)
      .translate(lambda: 5 > "mean")
      |alert()
      .critical(
      %% alert when point value is more than 3 stdvs away
      %% from running mean
        lambda: sigma("value") > 3,
        _global, 22.589
        )
        .when(lambda: hour("ts") >= 8 AND hour("ts") <= 18 AND day_of_week("ts") != 7)

   in1
           |eval(lambda: "value" * "value", lambda: 1/"value2")
               .as('value2', 'inv_value2')

      |shift(-6h)


  def boolTrue = true
  def boolFalse = false
  def in12 =
    in1
    |eval(lambda: if(( "ts" > (max(threshold,23.55) + 2)), boolTrue, boolFalse) )
    .as('ts_greater')

    in12
    |push(13)

    @moving_avg("gold")
    .step_size(14)


  def big_room = 'room is very big'
  def small_room = 'room is small'
  def here_we_are = 'here WE are !!!'
  def now_string = 'now'
  def lambda_output = 'data.l_out'


  |eval(lambda: str_concat('and', '{{here_we_are}}'))
  |eval(lambda: str_concat(['and', '{{here_we_are}}', now_string]))
  .as('{{lambda_output}}')
  |keep('data')
  .vars('one-', '-two', 'three 3')
  |eval(lambda: if(( "room_qm3" > threshold), 'Yes, {{big_room}}', 'No, {{small_room}}') )

